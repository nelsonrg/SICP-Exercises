#+property: header-args:racket :lang sicp
* Exercises
** 1.1

Below is a sequence of expressions.  What is the
result printed by the interpreter in response to each expression?
Assume that the sequence is to be evaluated in the order in which
it is presented.

          10
	  : 10

          (+ 5 3 4)
	  : 12

          (- 9 1)
	  : 8

          (/ 6 2)
	  : 3

          (+ (* 2 4) (- 4 6))
	  : 6

          (define a 3)
	  : 

          (define b (+ a 1))
	  : 

          (+ a b (* a b))
	  : 19

          (= a b)
	  : #f

          (if (and (> b a) (< b (* a b)))
              b
              a)
	  : 4

          (cond ((= a 4) 6)
                ((= b 4) (+ 6 7 a))
                (else 25))
	  : 16

          (+ 2 (if (> b a) b a))
	  : 6

          (* (cond ((> a b) a)
                   ((< a b) b)
                   (else -1))
             (+ a 1))
	  : 16
** 1.4

Observe that our model of evaluation allows for
combinations whose operators are compound expressions.  Use this
observation to describe the behavior of the following procedure:

          (define (a-plus-abs-b a b)
            ((if (> b 0) + -) a b))

The operator is chosen by a conditional. If `b` is positive, it is
added to `a`; otherwise, it is subtracted from `a`. This has the
effect of adding the absolute value of `b` to `a` (as the name would
suggest).

** 1.5

Ben Bitdiddle has invented a test to determine
whether the interpreter he is faced with is using
applicative-order evaluation or normal-order evaluation.  He
defines the following two procedures:

          (define (p) (p))

          (define (test x y)
            (if (= x 0)
                0
                y))

     Then he evaluates the expression

          (test 0 (p))

     What behavior will Ben observe with an interpreter that uses
     applicative-order evaluation?  What behavior will he observe with
     an interpreter that uses normal-order evaluation?  Explain your
     answer.  (Assume that the evaluation rule for the special form
     `if' is the same whether the interpreter is using normal or
     applicative order: The predicate expression is evaluated first,
     and the result determines whether to evaluate the consequent or
     the alternative expression.)

Normal-order: The result would be 0 because the if predicate
statement would evaluate to #t and then the procedure would return 0.

Applicative-order: The procedure will run forever because it cannot
substitute a value for the formal parameter `p`. It will infinitely
recurse as it evaluates `(p)`.
** 1.6

     Alyssa P. Hacker doesn't see why `if' needs to be
     provided as a special form.  "Why can't I just define it as an
     ordinary procedure in terms of `cond'?" she asks.  Alyssa's friend
     Eva Lu Ator claims this can indeed be done, and she defines a new
     version of `if':

          (define (new-if predicate then-clause else-clause)
            (cond (predicate then-clause)
                  (else else-clause)))

     Eva demonstrates the program for Alyssa:

          (new-if (= 2 3) 0 5)
          5

          (new-if (= 1 1) 0 5)
          0

     Delighted, Alyssa uses `new-if' to rewrite the square-root program:

          (define (sqrt-iter guess x)
            (new-if (good-enough? guess x)
                    guess
                    (sqrt-iter (improve guess x)
                               x)))

     What happens when Alyssa attempts to use this to compute square
     roots?  Explain.


`new-if` is a procedure and not a special form so it evaluates each
parameter subexpression before running the procedure. This creates an
infinite recursion because it calls itself in the alternative
expression.

** 1.8

Newton's method for cube roots is based on the
fact that if y is an approximation to the cube root of x, then a
better approximation is given by the value

\[
\frac{\frac{x}{y^2} + 2y}{3}
\]

Use this formula to implement a cube-root procedure analogous to
the square-root procedure.  (In section *Note 1-3-4:: we will see
how to implement Newton's method in general as an abstraction of
these square-root and cube-root procedures.)

#+begin_src racket
;;; Compute the absolute value of x.
;;; This is sufficiently abstracted to be in its own procudure.
(define (abs x)
  (if (>= x 0)
      x
      (- x)))

#|
Compute the cube-root of x using Newton's method.

Note that there are multiple internal procedures that are not
abstracted enough to be taken out of the cube-root scope. These
procedures are tightly coupled to the cube-root procedure. As
mentioned in the book, we will improve the abstraction later.
|#
(define (cube-root x)
  (define tolerance 0.001)
  (define (good-enough? guess x)
    (< (abs (- (expt guess 3)
               x))
       tolerance))
  (define (improve guess x)
    (/ (+ (/ x (expt guess 2))
          (* 2 guess))
       3))
  (define (cube-root-iter guess x)
    (if (good-enough? guess x)
      guess
      (cube-root-iter (improve guess x) x)))
  (cube-root-iter 1.1 x))

(cube-root 125)
#+end_src

#+RESULTS:
: 5.0000004639240965

** 1.9

Each of the following two procedures defines a method for adding two
positive integers in terms of the procedures inc, which increments its
argument by 1, and dec, which decrements its argument by 1.

#+begin_src racket :noeval
(define (+ a b)
  (if (= a 0) b (inc (+ (dec a) b))))
(define (+ a b)
  (if (= a 0) b (+ (dec a) (inc b))))
#+end_src

Using the substitution model, illustrate the process generated by each
procedure in evaluating ~(+ 4 5)~. Are these processes iterative or
recursive?

Here is the first definition.

#+begin_src racket :noeval
(inc (+ (dec 4) 5))
(inc (inc (+ (dec 3) 5)))
(inc (inc (inc (+ (dec 2) 5))))
(inc (inc (inc (inc (+ (dec 1) 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
(9)
#+end_src

And here is the second definition.

#+begin_src racket :noeval
(+ (dec 4) (inc 5))
(+ (dec 3) (inc 6))
(+ (dec 2) (inc 7))
(+ (dec 1) (inc 8))
(9)
#+end_src

The first definition is linearly recursive while the second definition is iterative.

** 1.10

The following procedures computes a mathematical function called
Ackermann's function.

#+begin_src racket :noeval
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1) (A x (- y 1))))))
#+end_src

What are the values of the following expressions?

~(A 1 10)~
#+begin_src racket :noeval
(A 0 (A 1 9))
(* 2 (A 0 (A 1 8)))
(* 2 (* 2 (A 0 (A 1 7))))
(* 2 (* 2 (* 2 (A 0 (A 1 6)))))
(* 2 (* 2 (* 2 (* 2 (A 0 (A 1 5))))))
(* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 4)))))))
(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 3))))))))
(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 2)))))))))
(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 1))))))))))
(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 2)))))))))
#+end_src

\[
2^{10} = 1024
\]

~(A 2 4)~
#+begin_src racket :noeval
(A 1 (A 2 3))
(A 1 (A 1 (A 2 2)))
(A 1 (A 1 (A 1 (A 2 1))))
(A 1 (A 1 (A 1 2))))
(A 1 (A 1 (A 0 (A 1 1))))
(A 1 (A 1 (A 0 2)))
(A 1 (A 1 (* 2 2)))
(A 1 (A 1 4))
(A 1 (A 0 (A 1 3)))
(A 1 (A 0 (A 0 (A 1 2))))
(A 1 (A 0 (A 0 (A 0 (A 1 1)))))
(A 1 (A 0 (A 0 (A 0 2))))
(A 1 (A 0 (A 0 4)))
(A 1 (A 0 8))
(A 1 16)
#+end_src

\[
2^{16} = 65536
\]


~(A 3 3)~
#+begin_src racket :noeval
(A 2 (A 3 2))
(A 2 (A 2 (A 3 1)))
(A 2 (A 2 2))
(A 2 (A 1 (A 2 1)))
(A 2 (A 1 2)))
(A 2 (A 0 (A 1 1)))
(A 2 (A 0 2))
(A 2 4))
#+end_src

This is the same as the previous problem: 65,536

~(define (f n) (A 0 n))~

This is easy by inspecting the function with the second base case.

\[
f = 2n
\]

~(define (g n) (A 1 n))~

We found this by finding ~(A 1 10)~.

\[
g = 2^n
\]

~(define (h n) (A 2 n))~

We found this by finding ~(A 2 4)~.

\[
h = 2^{n^2}
\]
** 1.11

A function $f$ is defined by the rule that

\[
f(n) = \begin{cases} 
         n & \text{if} \ n < 3, \\
         f(n-1) + 2f(n-2) + 3f(n-3) & \text{if} \ n \geq 3
       \end{cases}
\]

Write a procedure that computes $f$ by means of a recursive
process. Write a procedure that computes $f$ by means of an iterative
process.

#+begin_src racket :results output
;;; recursive implementation of f
(define (f-recursive n)
  (if (< n 3)
      n
      (+ (f-recursive (- n 1))
         (* 2 (f-recursive (- n 2)))
         (* 3 (f-recursive (- n 3))))))


;;; iterative implementation of f
(define (f-iter n)
  (define (f-iter-h f_n_1 f_n_2 f_n_3 count)
    (if (= count 0)
        f_n_3
        (f-iter-h (+ f_n_1 (* 2 f_n_2) (* 3 f_n_3))
                  f_n_1
                  f_n_2
                  (- count 1))))
  (f-iter-h 2 1 0 n))

(define test-list '(0 1 2 3 4 5 6 7 8 9 10))
(display (map f-recursive test-list))
(display "\n")
(display (map f-iter test-list))
#+end_src

#+RESULTS:
: (0 1 2 4 11 25 59 142 335 796 1892)
: (0 1 2 4 11 25 59 142 335 796 1892)

** 1.12

Write a procedure that computes elements of Pascal's triangle by means
of a recursive process.

#+begin_src racket :results output
(define (make-pascal row col)
  (cond ((= row 0) 1)                   ; First row base case
        ((or (= col 0) (= col row)) 1)  ; First and last column base case
        (else (+ (make-pascal (- row 1) (- col 1))
                 (make-pascal (- row 1) col)))))

(define (display-pascal-row n)
  (define row-length (+ n 1))
  (define (display-element col)
    (display (make-pascal n col))
    (display " ")
    (if (= (+ col 1) row-length)
        (newline)
        (display-element (+ col 1))))
  (display-element 0))

(define (display-pascal-triangle n-rows)
  (define (display-row row-number)
    (display-pascal-row row-number)
    (if (= (+ row-number 1) n-rows)
        (newline)
        (display-row (+ row-number 1))))
  (display-row 0))

(display-pascal-triangle 10)
#+end_src

#+RESULTS:
#+begin_example
1 
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 
1 6 15 20 15 6 1 
1 7 21 35 35 21 7 1 
1 8 28 56 70 56 28 8 1 
1 9 36 84 126 126 84 36 9 1 

#+end_example

** TODO 1.13

Prove that $\text{Fib}(n)$ is the closest integer to $\varphi^n /
\sqrt{5}$, where $\varphi = (1 + \sqrt{5})/2$.

** 1.15
*** 1.15.a

How many times is the procedure /p/ applied when ~(sine 12.15)~ is
evaluated?

#+begin_src racket :results output
(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define counter 1)
(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (begin
        (set! counter (+ counter 1))
        (p (sine (/ angle 3.0))))))

(sine 12.15)
(display counter)
#+end_src

#+RESULTS:
: -0.39980345741334
: 6

*** 1.15.b

#+begin_src racket
(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle step)
  (display step) (display ". ") (display angle) (newline)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0) (+ step 1)))))

(sine 12.15 1)
#+end_src

#+RESULTS:
: 1. 12.15
: 2. 4.05
: 3. 1.3499999999999999
: 4. 0.44999999999999996
: 5. 0.15
: 6. 0.049999999999999996
: -0.39980345741334

In each iteration, the angle is divided by three. So the number of
iterations $n$ will be defined by

\[
\begin{align*}
  \frac{n}{3^m} &= 0.1 \\
  10n &= 3^m \\
  m &= \frac{\log{10} + \log{n}}{\log{3}}
\end{align*}
\]

So the time complexity is $\Theta(\log{n})$. 

** 1.16

Write an iterative exponentiation process that uses successive
squaring.

I didn't use the process suggested by the hint, so I could probably
simplify this a little further.

#+begin_src racket :results output
(define (square x) (* x x))

(define (fast-expt-iter b n)
  (define (fast-expt-iter-h a m)
    (cond ((= m n) a)
          ((<= (* 2 m) n) (fast-expt-iter-h (square a) (* 2 m)))
          (else (fast-expt-iter-h (* a b) (+ m 1)))))
  (if (= n 0) 1
      (fast-expt-iter-h b 1)))

(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))

(define n-test (list 0 1 2 3 9 10))
(display (map (lambda (n) (fast-expt 2 n)) n-test))
(newline)
(display (map (lambda (n) (fast-expt-iter 2 n)) n-test))
(newline)

(define b-test (list 0 1 10 20))
(display (map (lambda (b) (fast-expt b 9)) b-test))
(newline)
(display (map (lambda (b) (fast-expt-iter b 9)) b-test))
#+end_src

#+RESULTS:
: (1 2 4 8 512 1024)
: (1 2 4 8 512 1024)
: (0 1 1000000000 512000000000)
: (0 1 1000000000 512000000000)

This is a version closer to what the book suggested. This avoids
having to specify the base case of a power of 0. In this approach we
count down from the power to zero instead of counting up like in the
previous approach.

#+begin_src racket :results output
(define (square x) (* x x))

(define (fast-expt-iter base power)
  (define (fast-expt-iter-h a b n)
    (cond ((= n 0) a)
          ((even? n) (fast-expt-iter-h a (square b) (/ n 2)))
          (else (fast-expt-iter-h (* a b) b (- n 1)))))
  (fast-expt-iter-h 1 base power))

(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))

(define n-test (list 0 1 2 3 9 10))
(display (map (lambda (n) (fast-expt 2 n)) n-test))
(newline)
(display (map (lambda (n) (fast-expt-iter 2 n)) n-test))
(newline)

(define b-test (list 0 1 10 20))
(display (map (lambda (b) (fast-expt b 9)) b-test))
(newline)
(display (map (lambda (b) (fast-expt-iter b 9)) b-test))
#+end_src

#+RESULTS:
: (1 2 4 8 512 1024)
: (1 2 4 8 512 1024)
: (0 1 1000000000 512000000000)
: (0 1 1000000000 512000000000)

** 1.17

Use ~double~ and ~halve~ to design a multiplication procedure that
uses a logarithmic number of steps.

#+begin_src racket :results output
(define (double x) (* 2 x))
(define (halve x) (/ x 2))

(define (mult-fast a b step)
  (display "Step ") (display step) (newline)
  (cond ((= b 0) 0)
        ((even? b) (mult-fast (double a) (halve b) (+ step 1)))
        (else (+ a (mult-fast a (- b 1) (+ step 1))))))

(define (mult-slow a b step)
  (display "Step ") (display step) (newline)
  (if (= b 0) 0
      (+ a (mult-slow a (- b 1) (+ step 1)))))

(display "Log-n") (newline)
(display (mult-fast 2 10 0))
(newline)

(display "Linear-n") (newline)
(display (mult-slow 2 10 0))
#+end_src

#+RESULTS:
#+begin_example
Log-n
Step 0
Step 1
Step 2
Step 3
Step 4
Step 5
20
Linear-n
Step 0
Step 1
Step 2
Step 3
Step 4
Step 5
Step 6
Step 7
Step 8
Step 9
Step 10
20
#+end_example

I print out the steps to demonstrate the improvement in time-complexity.

** 1.18

Now do the multiplication through an iterative algorithm.

#+begin_src racket :results output
(define (double x) (* 2 x))
(define (halve x) (/ x 2))

(define (mult-fast a b step)
  (display "Step ") (display step) (newline)
  (cond ((= b 0) 0)
        ((even? b) (mult-fast (double a) (halve b) (+ step 1)))
        (else (+ a (mult-fast a (- b 1) (+ step 1))))))

(define (mult-fast-iter a b)
  (define (mult-fast-iter-h a b c step)
    (display "Step ") (display step) (newline)
    (cond ((= b 0) c)
          ((even? b) (mult-fast-iter-h (double a) (halve b) c (+ step 1)))
          (else (mult-fast-iter-h a (- b 1) (+ c a) (+ step 1)))))
  (mult-fast-iter-h a b 0 0))

(display "Recursive") (newline)
(display (mult-fast 2 10 0))
(newline)

(display "Iterative") (newline)
(display (mult-fast-iter 2 10))
#+end_src

#+RESULTS:
#+begin_example
Recursive
Step 0
Step 1
Step 2
Step 3
Step 4
Step 5
20
Iterative
Step 0
Step 1
Step 2
Step 3
Step 4
Step 5
20
#+end_example

This mostly follows from the previous exercises.

** 1.19

\[
\begin{align*}
  T_{p, q}(a, b) &= (bq + aq + ap, bp + aq) \\
  T_{p, q}(T_{p, q}(a, b)) &= ((bp+aq)q + (bq+aq+ap)q + (bq+aq+ap)p, (bp+aq)p + (bq+aq+ap)q) \\
  &= (2aq^2+bq^2+2apq+2bpq+ap^2, bp^2+bq^2+aq^2+2apq) \\
  &= (b(2pq+q^2) + a(2pq+q^2) + a(p^2+q^2), b(p^2+q^2)+a(2pq+q^2))
\end{align*}
\]

So $q' = 2pq + q^2$ and $p' = p^2 + q^2$.

Now implement this in the fast Fibonacci algorithm.

#+begin_src racket
(define (fib n)
  (define (fib-iter a b p q cnt)
    (cond ((= cnt 0) b)
          ((even? cnt) (fib-iter a b
                                 (+ (* p p) (* q q))
                                 (+ (* 2 p q) (* q q))
                                 (/ cnt 2)))
          (else (fib-iter (+ (* b q) (* a q) (* a p))
                          (+ (* b p) (* a q))
                          p q (- cnt 1)))))
  (fib-iter 1 0 0 1 n))

(map fib (list 0 1 2 10 100))
#+end_src

#+RESULTS:
: (0 1 1 55 354224848179261915075)

** 1.20

Normal-order evaluation: 18 evaluations of ~remainder~.

#+begin_src racket :noeval
(gcd 206 40)
(gcd 40 (remainder 206 40))
(if (= (remainder 206 40) 0)  ; eval 1 x remainder, r = 6
    40
    (gcd (remainder 206 40)
         (remainder 40 (remainder 206 40))))
(if (= (remainder 40 (remainder 206 40)) 0)  ; eval 2 x remainder, r = 4
    (remainder 206 40)  ; 6
    (gcd (remainder 40 (remainder 206 40))
         (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))
(if (= (remainder (remainder 206 40) (remainder 40 (remainder 206 40))) 0)  ; eval 4 x remainder, r = 2
    (remainder 40 (remainder 206 40))  ; 4
    (gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
         (remainder (remainder 40 (remainder 206 40))
                    (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))
(if (= (remainder (remainder 40 (remainder 206 40))
                  (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
        0)  ; eval 7 x remainder, r = 0
    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))  ; eval 4 x remainder
    (gcd (remainder (remainder 40 (remainder 206 40))
                    (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
         (remainder (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
                    (remainder (remainder 40 (remainder 206 40))
                    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))))
(2)
;;; 18 Evaluations of 'remainder' total
#+end_src

Applicative-order evaluation: 4 evaluations of ~remainder~.

#+begin_src racket :noeval
(gcd 206 40)
(gcd 40 (remainder 206 40))  ; eval 1 x remainder
(gcd 40 6)
(gcd 6 (remainder 40 6))  ; eval 1 x remainder
(gcd 6 4)
(gcd 4 (remainder 6 4))  ; eval 1 x remainder
(gcd 4 2)
(gcd 2 (remainder 4 2))  ; eval 1 x remainder
(gcd 2 0)
(2)
;;; 4 Evaluations of 'remainder' total
#+end_src

** 1.21

#+begin_src racket
(define (square x) (* x x))

(define (smallest-divisor n)
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (define (divides? a b) (= (remainder b a) 0))
  (find-divisor n 2))

(map smallest-divisor (list 199 1999 19999))
#+end_src

#+RESULTS:
: (199 1999 7)

** 1.22

#+begin_src racket :results output
(define (square x) (* x x))

;;; From exercise 1.21
(define (smallest-divisor n)
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (define (divides? a b) (= (remainder b a) 0))
  (find-divisor n 2))

;;; From the book
(define (prime? n)
  (= n (smallest-divisor n)))

;;; Provided by the problem
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (search-for-primes start stop)
  (cond ((> start stop) (newline))
        ((even? start) (search-for-primes (+ start 1) stop))
        (else (timed-prime-test start)
              (search-for-primes (+ start 2) stop))))

(search-for-primes 1000 1019)  ; total time ~ 1
(search-for-primes 10000 10037)  ; total time ~ 5
(search-for-primes 100000 100043)  ; total time ~ 17
(search-for-primes 1000000 1000037)  ; total time ~ 52
#+end_src

#+RESULTS:
#+begin_example

1001
1003
1005
1007
1009 *** 0
1011
1013 *** 0
1015
1017
1019 *** 0

10001
10003
10005
10007 *** 0
10009 *** 0
10011
10013
10015
10017
10019
10021
10023
10025
10027
10029
10031
10033
10035
10037 *** 1

100001
100003 *** 0
100005
100007
100009
100011
100013
100015
100017
100019 *** 1
100021
100023
100025
100027
100029
100031
100033
100035
100037
100039
100041
100043 *** 0

1000001
1000003 *** 3
1000005
1000007
1000009
1000011
1000013
1000015
1000017
1000019
1000021
1000023
1000025
1000027
1000029
1000031
1000033 *** 2
1000035
1000037 *** 3
#+end_example

The growth in time went 1, 5, 17, 52. This really closely follows the
expected \(\sqrt(10)\) pattern.

\begin{align*}
  1 \cdot \sqrt(10) &\approx 3.16 \\
  5 \cdot \sqrt(10) &\approx 15.8 \\
  17 \cdot \sqrt(17) &\approx 53.8
\end{align*}

** 1.23

#+begin_src racket :results output
(define (square x) (* x x))

(define (next x)
  (if (= x 2)
      3
      (+ x 2)))

(define (smallest-divisor n)
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (next test-divisor)))))
  (define (divides? a b) (= (remainder b a) 0))
  (find-divisor n 2))

;;; From the book
(define (prime? n)
  (= n (smallest-divisor n)))

;;; Provided by the problem
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

;;; From exercise 1.22
(define (search-for-primes start stop)
  (cond ((> start stop) (newline))
        ((even? start) (search-for-primes (+ start 1) stop))
        (else (timed-prime-test start)
              (search-for-primes (+ start 2) stop))))

(search-for-primes 1000 1019)  ; total time ~ 1
(search-for-primes 10000 10037)  ; total time ~ 5
(search-for-primes 100000 100043)  ; total time ~ 10
(search-for-primes 1000000 1000037)  ; total time ~ 31
#+end_src

#+RESULTS:
#+begin_example

1001
1003
1005
1007
1009 *** 1
1011
1013 *** 0
1015
1017
1019 *** 0

10001
10003
10005
10007 *** 0
10009 *** 0
10011
10013
10015
10017
10019
10021
10023
10025
10027
10029
10031
10033
10035
10037 *** 0

100001
100003 *** 0
100005
100007
100009
100011
100013
100015
100017
100019 *** 1
100021
100023
100025
100027
100029
100031
100033
100035
100037
100039
100041
100043 *** 0

1000001
1000003 *** 1
1000005
1000007
1000009
1000011
1000013
1000015
1000017
1000019
1000021
1000023
1000025
1000027
1000029
1000031
1000033 *** 1
1000035
1000037 *** 1
#+end_example

| n    | Exercise 1.22 Times | Exercise 1.23 Times |
|------+---------------------+---------------------|
| 1k   |                   1 |                   1 |
| 10k  |                   5 |                   5 |
| 100k |                  17 |                  10 |
| 1M   |                  52 |                  31 |
|------+---------------------+---------------------|

The new procedure does improve computation times), but it is only
noticable for large n. The improvement is only about a 170% faster
which is not the 200% we expected. This probably comes from the extra
logic in the ~next~ procedure for the case-analysis.

** 1.24

#+begin_src racket :results output
(define (square x) (* x x))

(define (next x)
  (if (= x 2)
      3
      (+ x 2)))

(define (smallest-divisor n)
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (next test-divisor)))))
  (define (divides? a b) (= (remainder b a) 0))
  (find-divisor n 2))

;;; From the book
(define (prime? n)
  (= n (smallest-divisor n)))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))

(define (fermat-test n)
  (define (try-it x)
    (= (expmod x n n) x))
  (try-it (+ 1 (random (- n 1)))))

(define (expmod base exponent m)
  (cond ((= exponent 0) 1)
        ((even? exponent)
         (remainder (square (expmod base (/ exponent 2) m))
                    m))
        (else (remainder (* base (expmod base (- exponent 1) m))
                         m))))

;;; Provided by the problem
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (fast-prime? n 100)
      (report-prime (- (runtime) start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

;;; From exercise 1.22
(define (search-for-primes start stop)
  (cond ((> start stop) (newline))
        ((even? start) (search-for-primes (+ start 1) stop))
        (else (timed-prime-test start)
              (search-for-primes (+ start 2) stop))))

(search-for-primes 1000 1019)  ; total time ~ 201
(search-for-primes 10000 10037)  ; total time ~ 382
(search-for-primes 100000 100043)  ; total time ~ 286
(search-for-primes 1000000 1000037)  ; total time ~ 323
#+end_src

#+RESULTS:
#+begin_example

1001
1003
1005
1007
1009 *** 17
1011
1013 *** 19
1015
1017
1019 *** 19

10001
10003
10005
10007 *** 23
10009 *** 21
10011
10013
10015
10017
10019
10021
10023
10025
10027
10029
10031
10033
10035
10037 *** 22

100001
100003 *** 25
100005
100007
100009
100011
100013
100015
100017
100019 *** 26
100021
100023
100025
100027
100029
100031
100033
100035
100037
100039
100041
100043 *** 25

1000001
1000003 *** 29
1000005
1000007
1000009
1000011
1000013
1000015
1000017
1000019
1000021
1000023
1000025
1000027
1000029
1000031
1000033 *** 29
1000035
1000037 *** 30
#+end_example

I actually do not see much of a difference in the compute times as n
increases, but I expected to see a linear increase between the tests
because they grow exponentially (by orders of magnitude). We would
expect that testing 1,000,000 would take three times longer than
testing 1,000. I am not sure where the discrepancy is coming from.

** 1.25

The proposed implementation of ~expmod~ would return much larger
numbers from fast-expt than the algorithm we used to get the
remainder. This would impact memory use and potentially the run-time
as well.

** 1.26

The interpreter is running in applicative order, so the parameters
need to be evaluated before applying the procedure. In this case, the
same parameter ~(expmod base (/ exp 2) m)~ needs to be evaluated twice
before multiplying together. This doubles the work from the
implementation that uses the ~square~ procedure very time it is
called. Doubling the \( \Theta{( \log{n} )} \) at every ~expmod~ call
results in \( \Theta{( \log{2^n} )}  = \Theta{( n \log{2} )} = \Theta{(n)} \).

** 1.27

#+begin_src racket :results output
;;; test whether a^n is congruent to a modulo n for every a < n
(define (carmichael-number? n)
  (define (congruent? a)
    (= (expmod a n n) a))
  (define (all-congruent? a)
    (cond ((= a 1) #t)
          ((not (congruent? a)) #f)
          (else (all-congruent? (- a 1)))))
  (all-congruent? (- n 1)))

(define (square x) (* x x))

(define (expmod base exponent m)
  (cond ((= exponent 0) 1)
        ((even? exponent) (remainder (square (expmod base (/ exponent 2) m)) m))
        (else (remainder (* base (expmod base (- exponent 1) m)) m))))

(define carmichael-numbers (list 561 1105 1729 2465 2821 6601))
(define (display-carmichael-number x)
  (display x)
  (display " : ")
  (display (carmichael-number? x))
  (newline)
  nil)

(define (foreach lst fun)
  (fun (car lst))
  (if (not (null? (cdr lst)))
      (foreach (cdr lst) fun)))

(foreach carmichael-numbers display-carmichael-number)
#+end_src

#+RESULTS:
: 561 : #t
: 1105 : #t
: 1729 : #t
: 2465 : #t
: 2821 : #t
: 6601 : #t

** 1.28

#+begin_src racket :results output
(define (miller-rabin-prime? n times)
  (cond ((= times 0) true)
        ((miller-rabin-test n) (miller-rabin-prime? n (- times 1)))
        (else false)))

(define (miller-rabin-test n)
  (define (try-it x)
    (= (expmod-checked x n n) x))
  (try-it (+ 1 (random (- n 1)))))

(define (square x) (* x x))

(define (expmod-checked base exponent m)
  (cond ((= exponent 0) 1)
        ((even? exponent)
         (let* ((x (expmod-checked base (/ exponent 2) m))
                (y (remainder (square x) m)))
           (if (and (not (or (= x 1)
                             (= x (- m 1))))
                    (= y 1))
               0
               y)))
        (else (remainder (* base (expmod-checked base (- exponent 1) m)) m))))

(define carmichael-numbers (list 561 1105 1729 2465 2821 6601))
(define primes (list 2 5 7 11))
(define (display-prime-check x)
  (display x)
  (display " : ")
  (display (miller-rabin-prime? x 10))
  (newline)
  nil)

(define (foreach lst fun)
  (fun (car lst))
  (if (not (null? (cdr lst)))
      (foreach (cdr lst) fun)))

(display "Carmichael Numbers")
(newline)
(foreach carmichael-numbers display-prime-check)
(display "Known Primes")
(newline)
(foreach primes display-prime-check)
#+end_src

#+RESULTS:
#+begin_example
Carmichael Numbers
561 : #f
1105 : #f
1729 : #f
2465 : #f
2821 : #f
6601 : #f
Known Primes
2 : #t
5 : #t
7 : #t
11 : #t
#+end_example

** 1.29

#+begin_src racket :results output
(define (cube x) (* x x x))

(define (range start stop inc)
  (if (> start stop)
      nil
      (cons start (range (+ start inc) stop inc))))

(define (simpson-rule f a b n)
  (let* ((h (/ (- b a) n))
         (k (range 0 n 1))
         (coef-k (map (lambda (k) (cond ((= k 0) 1)
                                        ((= k n) 1)
                                        ((odd? k) 4)
                                        (else 2)))
                        k))
         (yk (map (lambda (k) (f (+ a (* k h)))) k)))
    (* (/ h 3) (apply + (map * coef-k yk)))))

(simpson-rule cube 0 1 100)
(simpson-rule cube 0 1 1000)
#+end_src

#+RESULTS:
: 1/4
: 1/4

This got the exact result correctly (with more precision than the
previous approach shown in the book).

** 1.30

#+begin_src racket :results output
(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ result (term a)))))
  (iter a 0))

(sum
 (lambda (x) (* x x x))
 1
 (lambda (x) (+ x 1))
 10)
#+end_src

#+RESULTS:
: 3025

** 1.31

#+begin_src racket :results output
(define (product-recursive term a next b)
  (if (> a b)
      1
      (* (term a)
         (product-recursive term (next a) next b))))

(define (product-iter term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (* result (term a)))))
  (iter a 1))

(define (factorial n)
  (product-recursive
   (lambda (x) x)
   1
   (lambda (x) (+ 1 x))
   n))

;;; https://en.wikipedia.org/wiki/Wallis_product
(define (wallis-product n)
  (define (increment x) (+ 1 x))
  (define (wallis-product-fn x)
    (* (/ (* 2 x)
          (- (* 2 x) 1))
       (/ (* 2 x)
          (+ (* 2 x) 1))))
  (product-recursive wallis-product-fn 1 increment n))

(define (wallis-approximate-pi n)
  (* 2 (wallis-product n)))

(exact->inexact (wallis-approximate-pi 100))
#+end_src

#+RESULTS:
: 3.1337874906281624

** 1.32

#+begin_src racket :results output
(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
                (accumulate combiner null-value term (next a) next b))))

(define (sum term a next b)
  (accumulate + 0 term a next b))

(define (product term a next b)
  (accumulate * 1 term a next b))

(define (accumulate-iter combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner result (term a)))))
  (iter a null-value))

(define (sum-iter term a next b)
  (accumulate-iter + 0 term a next b))

(define (product-iter term a next b)
  (accumulate-iter * 1 term a next b))

(sum
 (lambda (x) (* x x x))
 1
 (lambda (x) (+ x 1))
 10)  ; 3025

(product
 (lambda (x) (/ (+ x 2) x))
 1
 (lambda (x) (+ x 1))
 25)  ; 351

(sum-iter
 (lambda (x) (* x x x))
 1
 (lambda (x) (+ x 1))
 10)  ; 3025

(product-iter
 (lambda (x) (/ (+ x 2) x))
 1
 (lambda (x) (+ x 1))
 25)  ; 351
#+end_src

#+RESULTS:
: 3025
: 351
: 3025
: 351

** 1.33

#+begin_src racket :results output
(define (filtered-accumulate filterp combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (if (filterp a)
                    (term a)
                    null-value)
                (filtered-accumulate filterp combiner null-value term (next a) next b))))


(define (square x) (* x x))

;;; From exercise 1.21
(define (smallest-divisor n)
  (define (find-divisor n test-divisor)
    (cond ((> (square test-divisor) n) n)
          ((divides? test-divisor n) test-divisor)
          (else (find-divisor n (+ test-divisor 1)))))
  (define (divides? a b) (= (remainder b a) 0))
  (find-divisor n 2))

;;; From the book
(define (prime? n)
  (= n (smallest-divisor n)))


(define (inc x) (+ x 1))

(define (identity x) x)

(define (relative-prime? i n)
  (= (gcd i n) 1))

;;; sum of squares of prime numbers in interval a to b
(define (sum-prime-squares a b)
  (filtered-accumulate prime? + 0 square a inc b))

;;; product of all positive integers less than n that are relatively prime to n
(define (product-relative-prime n)
  (filtered-accumulate (lambda (x) (relative-prime? x n)) * 1 identity 1 inc (- n 1)))

(product-relative-prime 10)
#+end_src

#+RESULTS:
: 189

** 1.34

Here is the procedure working in the two examples.

#+begin_src racket :results output
(define (f g) (g 2))

(define (square x) (* x x))

(f square)

(f (lambda (z) (* z (+ z 1))))
#+end_src

#+RESULTS:
: 4
: 6

If we asked the interpreter to evaluate `(f f)`, it would fail. Here is how it would evaluate:

#+begin_src racket :noeval
(f f)
(f 2)
(2 2)
#+end_src

This fails because it tries to use "2" as a procedure on the number 2.

** 1.35

#+begin_src racket :results output
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0)
#+end_src

#+RESULTS:
: 1.6180327868852458

** 1.36

#+begin_src racket :results output
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess counter)
    (display guess) (display ": ") (display counter) (newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next (+ counter 1)))))
  (try first-guess 0))

(fixed-point (lambda (x) (/ (log 1000) (log x))) 2.0)

(define (average x y) (/ (+ x y) 2))

(fixed-point
 (lambda (x) (average x
                      (/ (log 1000)
                         (log x))))
 2.0)
#+end_src

#+RESULTS:
#+begin_example
2.0: 0
9.965784284662087: 1
3.004472209841214: 2
6.279195757507157: 3
3.759850702401539: 4
5.215843784925895: 5
4.182207192401397: 6
4.8277650983445906: 7
4.387593384662677: 8
4.671250085763899: 9
4.481403616895052: 10
4.6053657460929: 11
4.5230849678718865: 12
4.577114682047341: 13
4.541382480151454: 14
4.564903245230833: 15
4.549372679303342: 16
4.559606491913287: 17
4.552853875788271: 18
4.557305529748263: 19
4.554369064436181: 20
4.556305311532999: 21
4.555028263573554: 22
4.555870396702851: 23
4.555315001192079: 24
4.5556812635433275: 25
4.555439715736846: 26
4.555599009998291: 27
4.555493957531389: 28
4.555563237292884: 29
4.555517548417651: 30
4.555547679306398: 31
4.555527808516254: 32
4.555540912917957: 33
4.555532270803653
2.0: 0
5.9828921423310435: 1
4.922168721308343: 2
4.628224318195455: 3
4.568346513136242: 4
4.5577305909237005: 5
4.555909809045131: 6
4.555599411610624: 7
4.5555465521473675: 8
4.555537551999825
#+end_example

The non-damped version took 34 steps while the damped version found the fixed point in only 9 steps.

** 1.37

#+begin_src racket :results output
(define (cont-frac n d k)
  (define (cont-frac-i i)
    (if (= i k)
        (/ (n i) (d i))
        (/ (n i)
           (+ (d i) (cont-frac-i (+ i 1))))))
  (cont-frac-i 1))

(define (approx-inverse-phi k)
  (let ((approx (cont-frac (lambda (i) 1.0)
                           (lambda (i) 1.0)
                           k)))
    (display k) (display ": ") (display approx) (newline)
    (if (= 0.6180
           (/ (floor (* approx 1e4))
              1e4))
        approx
        (approx-inverse-phi (+ k 1)))))

(approx-inverse-phi 1)

(define (cont-frac-iter n d k)
  (define (cont-frac-i i result)
    (if (= i 0)
        result
        (cont-frac-i (- i 1) (/ (n i) (+ (d i) result)))))
  (cont-frac-i k 0))

(cont-frac-iter (lambda (i) 1.0)
                (lambda (i) 1.0)
                11)
#+end_src

#+RESULTS:
#+begin_example
1: 1.0
2: 0.5
3: 0.6666666666666666
4: 0.6000000000000001
5: 0.625
6: 0.6153846153846154
7: 0.6190476190476191
8: 0.6176470588235294
9: 0.6181818181818182
10: 0.6179775280898876
11: 0.6180555555555556
0.6180555555555556
0.6180555555555556
#+end_example

It takes 11 iterations to approximate \[ \varphi^{-1} \]. 

** 1.38

#+begin_src racket :results output
(define (euler-d i)
  (if (= (modulo (+ i 1) 3) 0)
      (* 2 (/ (+ i 1) 3))
      1))

(define (cont-frac n d k)
  (define (cont-frac-i i)
    (if (= i k)
        (/ (n i) (d i))
        (/ (n i)
           (+ (d i) (cont-frac-i (+ i 1))))))
  (cont-frac-i 1))

(define (approx-e k)
  (cont-frac (lambda (i) 1.0)
             euler-d
             k))

(approx-e 10)
#+end_src

#+RESULTS:
: 0.7182817182817183

** 1.39

#+begin_src racket :results output
(define (cont-frac n d k)
  (define (cont-frac-i i)
    (if (= i k)
        (/ (n i) (d i))
        (/ (n i)
           (+ (d i) (cont-frac-i (+ i 1))))))
  (cont-frac-i 1))

(define (tan-cf x k)
  (define (n x i)
    (if (= i 1)
        x
        (* x x -1)))
  (define (d i)
    (- (* 2 i) 1))
  (cont-frac (lambda (i) (n x i)) d k))

(define test-values '(0.0001 3.141592 2 10))
(map (lambda (x) (exact->inexact (tan-cf x 20))) test-values)
(map tan test-values)
#+end_src

#+RESULTS:
: (0.00010000000033333334 -6.535897928395179e-7 -2.185039863261519 0.6483608247520873)
: (0.00010000000033333334 -6.535897930763814e-7 -2.185039863261519 0.6483608274590866)

We get really good approximations with k=20.

** 1.40

Most of this work is just copying procedures from the book.

#+begin_src racket :results output
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define dx 0.00001)

(define (deriv g)
  (lambda (x) (/ (- (g (+ x dx)) (g x))
                 dx)))

(define (newton-transform g)
  (lambda (x) (- x (/ (g x)
                      ((deriv g) x)))))

(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))

(define (cubic a b c)
  (lambda (x) (+ (* x x x)
                 (* a x x)
                 (* b x)
                 c)))

(newtons-method (cubic 1 2 3) 1)
#+end_src

#+RESULTS:
: -1.2756822036498454

** 1.41

#+begin_src racket :results output
(define (double f)
  (lambda (x) (f (f x))))

(define (inc x)
  (+ x 1))

(((double (double double)) inc) 5)
#+end_src

#+RESULTS:
: 21

** 1.42

#+begin_src racket :results output
(define (inc x)
  (+ x 1))

(define (square x)
  (* x x))

(define (compose f g)
  (lambda (x) (f (g x))))

((compose square inc) 6)
#+end_src

#+RESULTS:
: 49

** 1.43

#+begin_src racket :results output
(define (square x)
  (* x x))

(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (- n 1)))))

((repeated square 2) 5)
#+end_src

#+RESULTS:
: 625

** 1.44

#+begin_src racket :results output
(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (- n 1)))))

(define (sum x)
  (if (null? x)
      0
      (+ (car x) (sum (cdr x)))))

(define (length x)
  (if (null? x)
      0
      (+ 1 (length (cdr x)))))

(define (average x)
  (/ (sum x)
     (length x)))

(define (smooth f)
  (let ((dx 0.00001))
    (lambda (x)
      (average (list
                (f (- x dx))
                (f x)
                (f (+ x dx)))))))

(define (smooth-nth f n)
  ((repeated smooth n) f))
#+end_src

#+RESULTS:

** 1.45

This one is a bit weird. The setting the number of damps too low or
too high causes problems. Something around the log or log_2 of the
power seems to work.

#+begin_src racket :results output
(define tolerance 0.001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess counter)
    ;;(display guess) (display ": ") (display counter) (newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next (+ counter 1)))))
  (try first-guess 0))

(define (sum x)
  (apply + x))

(define (length x)
  (if (null? x)
      0
      (+ 1 (length (cdr x)))))

(define (average x)
  (/ (sum x)
     (length x)))

(define (average-damp f)
  (lambda (x) (average (list x (f x)))))

(define (compose f g)
  (lambda (x) (f (g x))))

(define (repeated f n)
  (if (= n 1)
      f
      (compose f (repeated f (- n 1)))))

(define (power x n)
  (if (= n 0)
      1
      (* x (power x (- n 1)))))

(define (nth-root x n)
  (let ((ndamp (floor (log n 2))))
    (fixed-point
     ((repeated average-damp ndamp)
      (lambda (y) (/ x (power y (- n 1)))))
     1.0)))

(for-each
 (lambda (n) (display (nth-root 10 n)) (newline))
 '(2 3 4 5 6 7 8 9 10))
#+end_src

#+RESULTS:
: 3.162277665175675
: 2.1546660404202544
: 1.7782794100444472
: 1.5850086458653454
: 1.4675320560199525
: 1.3891651177639235
: 1.3335214377402689
: 1.2914630585345805
: 1.258747648832685

