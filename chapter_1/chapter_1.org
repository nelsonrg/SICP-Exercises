#+property: header-args:racket :lang sicp
* Exercises
** 1.1

Below is a sequence of expressions.  What is the
result printed by the interpreter in response to each expression?
Assume that the sequence is to be evaluated in the order in which
it is presented.

          10
	  : 10

          (+ 5 3 4)
	  : 12

          (- 9 1)
	  : 8

          (/ 6 2)
	  : 3

          (+ (* 2 4) (- 4 6))
	  : 6

          (define a 3)
	  : 

          (define b (+ a 1))
	  : 

          (+ a b (* a b))
	  : 19

          (= a b)
	  : #f

          (if (and (> b a) (< b (* a b)))
              b
              a)
	  : 4

          (cond ((= a 4) 6)
                ((= b 4) (+ 6 7 a))
                (else 25))
	  : 16

          (+ 2 (if (> b a) b a))
	  : 6

          (* (cond ((> a b) a)
                   ((< a b) b)
                   (else -1))
             (+ a 1))
	  : 16
** 1.4

Observe that our model of evaluation allows for
combinations whose operators are compound expressions.  Use this
observation to describe the behavior of the following procedure:

          (define (a-plus-abs-b a b)
            ((if (> b 0) + -) a b))

The operator is chosen by a conditional. If `b` is positive, it is
added to `a`; otherwise, it is subtracted from `a`. This has the
effect of adding the absolute value of `b` to `a` (as the name would
suggest).

** 1.5

Ben Bitdiddle has invented a test to determine
whether the interpreter he is faced with is using
applicative-order evaluation or normal-order evaluation.  He
defines the following two procedures:

          (define (p) (p))

          (define (test x y)
            (if (= x 0)
                0
                y))

     Then he evaluates the expression

          (test 0 (p))

     What behavior will Ben observe with an interpreter that uses
     applicative-order evaluation?  What behavior will he observe with
     an interpreter that uses normal-order evaluation?  Explain your
     answer.  (Assume that the evaluation rule for the special form
     `if' is the same whether the interpreter is using normal or
     applicative order: The predicate expression is evaluated first,
     and the result determines whether to evaluate the consequent or
     the alternative expression.)

Normal-order: The result would be 0 because the if predicate
statement would evaluate to #t and then the procedure would return 0.

Applicative-order: The procedure will run forever because it cannot
substitute a value for the formal parameter `p`. It will infinitely
recurse as it evaluates `(p)`.
** 1.6

     Alyssa P. Hacker doesn't see why `if' needs to be
     provided as a special form.  "Why can't I just define it as an
     ordinary procedure in terms of `cond'?" she asks.  Alyssa's friend
     Eva Lu Ator claims this can indeed be done, and she defines a new
     version of `if':

          (define (new-if predicate then-clause else-clause)
            (cond (predicate then-clause)
                  (else else-clause)))

     Eva demonstrates the program for Alyssa:

          (new-if (= 2 3) 0 5)
          5

          (new-if (= 1 1) 0 5)
          0

     Delighted, Alyssa uses `new-if' to rewrite the square-root program:

          (define (sqrt-iter guess x)
            (new-if (good-enough? guess x)
                    guess
                    (sqrt-iter (improve guess x)
                               x)))

     What happens when Alyssa attempts to use this to compute square
     roots?  Explain.


`new-if` is a procedure and not a special form so it evaluates each
parameter subexpression before running the procedure. This creates an
infinite recursion because it calls itself in the alternative
expression.

** 1.8

Newton's method for cube roots is based on the
fact that if y is an approximation to the cube root of x, then a
better approximation is given by the value

\[
\frac{\frac{x}{y^2} + 2y}{3}
\]

Use this formula to implement a cube-root procedure analogous to
the square-root procedure.  (In section *Note 1-3-4:: we will see
how to implement Newton's method in general as an abstraction of
these square-root and cube-root procedures.)

#+begin_src racket
;;; Compute the absolute value of x.
;;; This is sufficiently abstracted to be in its own procudure.
(define (abs x)
  (if (>= x 0)
      x
      (- x)))

#|
Compute the cube-root of x using Newton's method.

Note that there are multiple internal procedures that are not
abstracted enough to be taken out of the cube-root scope. These
procedures are tightly coupled to the cube-root procedure. As
mentioned in the book, we will improve the abstraction later.
|#
(define (cube-root x)
  (define tolerance 0.001)
  (define (good-enough? guess x)
    (< (abs (- (expt guess 3)
               x))
       tolerance))
  (define (improve guess x)
    (/ (+ (/ x (expt guess 2))
          (* 2 guess))
       3))
  (define (cube-root-iter guess x)
    (if (good-enough? guess x)
      guess
      (cube-root-iter (improve guess x) x)))
  (cube-root-iter 1.1 x))

(cube-root 125)
#+end_src

#+RESULTS:
: 5.0000004639240965

** 1.9

Each of the following two procedures defines a method for adding two
positive integers in terms of the procedures inc, which increments its
argument by 1, and dec, which decrements its argument by 1.

#+begin_src racket :noeval
(define (+ a b)
  (if (= a 0) b (inc (+ (dec a) b))))
(define (+ a b)
  (if (= a 0) b (+ (dec a) (inc b))))
#+end_src

Using the substitution model, illustrate the process generated by each
procedure in evaluating ~(+ 4 5)~. Are these processes iterative or
recursive?

Here is the first definition.

#+begin_src racket :noeval
(inc (+ (dec 4) 5))
(inc (inc (+ (dec 3) 5)))
(inc (inc (inc (+ (dec 2) 5))))
(inc (inc (inc (inc (+ (dec 1) 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
(9)
#+end_src

And here is the second definition.

#+begin_src racket :noeval
(+ (dec 4) (inc 5))
(+ (dec 3) (inc 6))
(+ (dec 2) (inc 7))
(+ (dec 1) (inc 8))
(9)
#+end_src

The first definition is linearly recursive while the second definition is iterative.

** 1.10

The following procedures computes a mathematical function called
Ackermann's function.

#+begin_src racket :noeval
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1) (A x (- y 1))))))
#+end_src

What are the values of the following expressions?

~(A 1 10)~
#+begin_src racket :noeval
(A 0 (A 1 9))
(* 2 (A 0 (A 1 8)))
(* 2 (* 2 (A 0 (A 1 7))))
(* 2 (* 2 (* 2 (A 0 (A 1 6)))))
(* 2 (* 2 (* 2 (* 2 (A 0 (A 1 5))))))
(* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 4)))))))
(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 3))))))))
(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 2)))))))))
(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 1))))))))))
(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 2)))))))))
#+end_src

\[
2^{10} = 1024
\]

~(A 2 4)~
#+begin_src racket :noeval
(A 1 (A 2 3))
(A 1 (A 1 (A 2 2)))
(A 1 (A 1 (A 1 (A 2 1))))
(A 1 (A 1 (A 1 2))))
(A 1 (A 1 (A 0 (A 1 1))))
(A 1 (A 1 (A 0 2)))
(A 1 (A 1 (* 2 2)))
(A 1 (A 1 4))
(A 1 (A 0 (A 1 3)))
(A 1 (A 0 (A 0 (A 1 2))))
(A 1 (A 0 (A 0 (A 0 (A 1 1)))))
(A 1 (A 0 (A 0 (A 0 2))))
(A 1 (A 0 (A 0 4)))
(A 1 (A 0 8))
(A 1 16)
#+end_src

\[
2^{16} = 65536
\]


~(A 3 3)~
#+begin_src racket :noeval
(A 2 (A 3 2))
(A 2 (A 2 (A 3 1)))
(A 2 (A 2 2))
(A 2 (A 1 (A 2 1)))
(A 2 (A 1 2)))
(A 2 (A 0 (A 1 1)))
(A 2 (A 0 2))
(A 2 4))
#+end_src

This is the same as the previous problem: 65,536

~(define (f n) (A 0 n))~

This is easy by inspecting the function with the second base case.

\[
f = 2n
\]

~(define (g n) (A 1 n))~

We found this by finding ~(A 1 10)~.

\[
g = 2^n
\]

~(define (h n) (A 2 n))~

We found this by finding ~(A 2 4)~.

\[
h = 2^{n^2}
\]
** 1.11

A function $f$ is defined by the rule that

\[
f(n) = \begin{cases} 
         n & \text{if} \ n < 3, \\
         f(n-1) + 2f(n-2) + 3f(n-3) & \text{if} \ n \geq 3
       \end{cases}
\]

Write a procedure that computes $f$ by means of a recursive
process. Write a procedure that computes $f$ by means of an iterative
process.

#+begin_src racket :results output
;;; recursive implementation of f
(define (f-recursive n)
  (if (< n 3)
      n
      (+ (f-recursive (- n 1))
         (* 2 (f-recursive (- n 2)))
         (* 3 (f-recursive (- n 3))))))


;;; iterative implementation of f
(define (f-iter n)
  (define (f-iter-h f_n_1 f_n_2 f_n_3 count)
    (if (= count 0)
        f_n_3
        (f-iter-h (+ f_n_1 (* 2 f_n_2) (* 3 f_n_3))
                  f_n_1
                  f_n_2
                  (- count 1))))
  (f-iter-h 2 1 0 n))

(define test-list '(0 1 2 3 4 5 6 7 8 9 10))
(display (map f-recursive test-list))
(display "\n")
(display (map f-iter test-list))
#+end_src

#+RESULTS:
: (0 1 2 4 11 25 59 142 335 796 1892)
: (0 1 2 4 11 25 59 142 335 796 1892)

** 1.12

Write a procedure that computes elements of Pascal's triangle by means
of a recursive process.

#+begin_src racket :results output
(define (make-pascal row col)
  (cond ((= row 0) 1)                   ; First row base case
        ((or (= col 0) (= col row)) 1)  ; First and last column base case
        (else (+ (make-pascal (- row 1) (- col 1))
                 (make-pascal (- row 1) col)))))

(define (display-pascal-row n)
  (define row-length (+ n 1))
  (define (display-element col)
    (display (make-pascal n col))
    (display " ")
    (if (= (+ col 1) row-length)
        (newline)
        (display-element (+ col 1))))
  (display-element 0))

(define (display-pascal-triangle n-rows)
  (define (display-row row-number)
    (display-pascal-row row-number)
    (if (= (+ row-number 1) n-rows)
        (newline)
        (display-row (+ row-number 1))))
  (display-row 0))

(display-pascal-triangle 10)
#+end_src

#+RESULTS:
#+begin_example
1 
1 1 
1 2 1 
1 3 3 1 
1 4 6 4 1 
1 5 10 10 5 1 
1 6 15 20 15 6 1 
1 7 21 35 35 21 7 1 
1 8 28 56 70 56 28 8 1 
1 9 36 84 126 126 84 36 9 1 

#+end_example

** TODO 1.13

Prove that $\text{Fib}(n)$ is the closest integer to $\varphi^n /
\sqrt{5}$, where $\varphi = (1 + \sqrt{5})/2$.

** 1.15
*** 1.15.a

How many times is the procedure /p/ applied when ~(sine 12.15)~ is
evaluated?

#+begin_src racket :results output
(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define counter 1)
(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (begin
        (set! counter (+ counter 1))
        (p (sine (/ angle 3.0))))))

(sine 12.15)
(display counter)
#+end_src

#+RESULTS:
: -0.39980345741334
: 6

*** 1.15.b

#+begin_src racket
(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle step)
  (display step) (display ". ") (display angle) (newline)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0) (+ step 1)))))

(sine 12.15 1)
#+end_src

#+RESULTS:
: 1. 12.15
: 2. 4.05
: 3. 1.3499999999999999
: 4. 0.44999999999999996
: 5. 0.15
: 6. 0.049999999999999996
: -0.39980345741334

In each iteration, the angle is divided by three. So the number of
iterations $n$ will be defined by

\[
\begin{align*}
  \frac{n}{3^m} &= 0.1 \\
  10n &= 3^m \\
  m &= \frac{\log{10} + \log{n}}{\log{3}}
\end{align*}
\]

So the time complexity is $\Theta(\log{n})$. 

** 1.16

Write an iterative exponentiation process that uses successive
squaring.

I didn't use the process suggested by the hint, so I could probably
simplify this a little further.

#+begin_src racket :results output
(define (square x) (* x x))

(define (fast-expt-iter b n)
  (define (fast-expt-iter-h a m)
    (cond ((= m n) a)
          ((<= (* 2 m) n) (fast-expt-iter-h (square a) (* 2 m)))
          (else (fast-expt-iter-h (* a b) (+ m 1)))))
  (if (= n 0) 1
      (fast-expt-iter-h b 1)))

(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))

(define n-test (list 0 1 2 3 9 10))
(display (map (lambda (n) (fast-expt 2 n)) n-test))
(newline)
(display (map (lambda (n) (fast-expt-iter 2 n)) n-test))
(newline)

(define b-test (list 0 1 10 20))
(display (map (lambda (b) (fast-expt b 9)) b-test))
(newline)
(display (map (lambda (b) (fast-expt-iter b 9)) b-test))
#+end_src

#+RESULTS:
: (1 2 4 8 512 1024)
: (1 2 4 8 512 1024)
: (0 1 1000000000 512000000000)
: (0 1 1000000000 512000000000)

This is a version closer to what the book suggested. This avoids
having to specify the base case of a power of 0. In this approach we
count down from the power to zero instead of counting up like in the
previous approach.

#+begin_src racket :results output
(define (square x) (* x x))

(define (fast-expt-iter base power)
  (define (fast-expt-iter-h a b n)
    (cond ((= n 0) a)
          ((even? n) (fast-expt-iter-h a (square b) (/ n 2)))
          (else (fast-expt-iter-h (* a b) b (- n 1)))))
  (fast-expt-iter-h 1 base power))

(define (fast-expt b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt b (/ n 2))))
        (else (* b (fast-expt b (- n 1))))))

(define n-test (list 0 1 2 3 9 10))
(display (map (lambda (n) (fast-expt 2 n)) n-test))
(newline)
(display (map (lambda (n) (fast-expt-iter 2 n)) n-test))
(newline)

(define b-test (list 0 1 10 20))
(display (map (lambda (b) (fast-expt b 9)) b-test))
(newline)
(display (map (lambda (b) (fast-expt-iter b 9)) b-test))
#+end_src

#+RESULTS:
: (1 2 4 8 512 1024)
: (1 2 4 8 512 1024)
: (0 1 1000000000 512000000000)
: (0 1 1000000000 512000000000)

** 1.17

Use ~double~ and ~halve~ to design a multiplication procedure that
uses a logarithmic number of steps.

#+begin_src racket :results output
(define (double x) (* 2 x))
(define (halve x) (/ x 2))

(define (mult-fast a b step)
  (display "Step ") (display step) (newline)
  (cond ((= b 0) 0)
        ((even? b) (mult-fast (double a) (halve b) (+ step 1)))
        (else (+ a (mult-fast a (- b 1) (+ step 1))))))

(define (mult-slow a b step)
  (display "Step ") (display step) (newline)
  (if (= b 0) 0
      (+ a (mult-slow a (- b 1) (+ step 1)))))

(display "Log-n") (newline)
(display (mult-fast 2 10 0))
(newline)

(display "Linear-n") (newline)
(display (mult-slow 2 10 0))
#+end_src

#+RESULTS:
#+begin_example
Log-n
Step 0
Step 1
Step 2
Step 3
Step 4
Step 5
20
Linear-n
Step 0
Step 1
Step 2
Step 3
Step 4
Step 5
Step 6
Step 7
Step 8
Step 9
Step 10
20
#+end_example

I print out the steps to demonstrate the improvement in time-complexity.

** 1.18

Now do the multiplication through an iterative algorithm.

#+begin_src racket :results output
(define (double x) (* 2 x))
(define (halve x) (/ x 2))

(define (mult-fast a b step)
  (display "Step ") (display step) (newline)
  (cond ((= b 0) 0)
        ((even? b) (mult-fast (double a) (halve b) (+ step 1)))
        (else (+ a (mult-fast a (- b 1) (+ step 1))))))

(define (mult-fast-iter a b)
  (define (mult-fast-iter-h a b c step)
    (display "Step ") (display step) (newline)
    (cond ((= b 0) c)
          ((even? b) (mult-fast-iter-h (double a) (halve b) c (+ step 1)))
          (else (mult-fast-iter-h a (- b 1) (+ c a) (+ step 1)))))
  (mult-fast-iter-h a b 0 0))

(display "Recursive") (newline)
(display (mult-fast 2 10 0))
(newline)

(display "Iterative") (newline)
(display (mult-fast-iter 2 10))
#+end_src

#+RESULTS:
#+begin_example
Recursive
Step 0
Step 1
Step 2
Step 3
Step 4
Step 5
20
Iterative
Step 0
Step 1
Step 2
Step 3
Step 4
Step 5
20
#+end_example

This mostly follows from the previous exercises.

** 1.19

\[
\begin{align*}
  T_{p, q}(a, b) &= (bq + aq + ap, bp + aq) \\
  T_{p, q}(T_{p, q}(a, b)) &= ((bp+aq)q + (bq+aq+ap)q + (bq+aq+ap)p, (bp+aq)p + (bq+aq+ap)q) \\
  &= (2aq^2+bq^2+2apq+2bpq+ap^2, bp^2+bq^2+aq^2+2apq) \\
  &= (b(2pq+q^2) + a(2pq+q^2) + a(p^2+q^2), b(p^2+q^2)+a(2pq+q^2))
\end{align*}
\]

So $q' = 2pq + q^2$ and $p' = p^2 + q^2$.

Now implement this in the fast Fibonacci algorithm.

#+begin_src racket
(define (fib n)
  (define (fib-iter a b p q cnt)
    (cond ((= cnt 0) b)
          ((even? cnt) (fib-iter a b
                                 (+ (* p p) (* q q))
                                 (+ (* 2 p q) (* q q))
                                 (/ cnt 2)))
          (else (fib-iter (+ (* b q) (* a q) (* a p))
                          (+ (* b p) (* a q))
                          p q (- cnt 1)))))
  (fib-iter 1 0 0 1 n))

(map fib (list 0 1 2 10 100))
#+end_src

#+RESULTS:
: (0 1 1 55 354224848179261915075)

** 1.20

Normal-order evaluation: 18 evaluations of ~remainder~.

#+begin_src racket :noeval
(gcd 206 40)
(gcd 40 (remainder 206 40))
(if (= (remainder 206 40) 0)  ; eval 1 x remainder, r = 6
    40
    (gcd (remainder 206 40)
         (remainder 40 (remainder 206 40))))
(if (= (remainder 40 (remainder 206 40)) 0)  ; eval 2 x remainder, r = 4
    (remainder 206 40)  ; 6
    (gcd (remainder 40 (remainder 206 40))
         (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))
(if (= (remainder (remainder 206 40) (remainder 40 (remainder 206 40))) 0)  ; eval 4 x remainder, r = 2
    (remainder 40 (remainder 206 40))  ; 4
    (gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
         (remainder (remainder 40 (remainder 206 40))
                    (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))
(if (= (remainder (remainder 40 (remainder 206 40))
                  (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
        0)  ; eval 7 x remainder, r = 0
    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))  ; eval 4 x remainder
    (gcd (remainder (remainder 40 (remainder 206 40))
                    (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))
         (remainder (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
                    (remainder (remainder 40 (remainder 206 40))
                    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))))
(2)
;;; 18 Evaluations of 'remainder' total
#+end_src

Applicative-order evaluation: 4 evaluations of ~remainder~.

#+begin_src racket :noeval
(gcd 206 40)
(gcd 40 (remainder 206 40))  ; eval 1 x remainder
(gcd 40 6)
(gcd 6 (remainder 40 6))  ; eval 1 x remainder
(gcd 6 4)
(gcd 4 (remainder 6 4))  ; eval 1 x remainder
(gcd 4 2)
(gcd 2 (remainder 4 2))  ; eval 1 x remainder
(gcd 2 0)
(2)
;;; 4 Evaluations of 'remainder' total
#+end_src


