#+SETUPFILE: ~/org/org-html-themes/org/theme-bigblow.setup
#+property: header-args :racket :lang sicp
#+property: header-args :exports both
#+OPTIONS: num:nil
* Exercises
** 2.1

#+begin_src racket :results output
(define (get-sign x)
  (if (>= x 0)
      1
      -1))

(define (make-rat n d)
  (let ((g (gcd n d))
        (sign (get-sign (* n d))))
    (cons (/ (* sign (abs n)) g)
          (/ (abs d) g))))

(define (numer x)
  (car x))

(define (denom x)
  (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(print-rat (make-rat 4 6))
(print-rat (make-rat -4 -6))
(print-rat (make-rat -4 6))
(print-rat (make-rat 4 -6))
#+end_src

#+RESULTS:
: 
: 2/3
: 2/3
: -2/3
: -2/3

** 2.2

#+begin_src racket :results output
(define (make-point x y)
  (cons x y))

(define (x-point point)
  (car point))

(define (y-point point)
  (cdr point))

(define (make-segment start-point end-point)
  (cons start-point end-point))

(define (start-segment segment)
  (car segment))

(define (end-segment segment)
  (cdr segment))

(define (mid-point segment)
  (let ((point-list (list (start-segment segment) (end-segment segment))))
    (make-point (average (map x-point point-list))
                (average (map y-point point-list)))))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

(define (print-segment s)
  (print-point (start-segment s))
  (print-point (end-segment s)))

(define (sum x)
  (apply + x))

(define (length x)
  (if (null? x)
      0
      (+ 1 (length (cdr x)))))

(define (average x)
  (/ (sum x)
     (length x)))

(define origin (make-point 0 0))
(define p1 (make-point 1 1))
(define segment1 (make-segment origin p1))
(print-segment segment1)
(print-point (mid-point segment1))
#+end_src

#+RESULTS:
: 
: (0,0)
: (1,1)
: (1/2,1/2)

** 2.4

#+begin_src racket :results output
#lang sicp

(define (cons x y)
  (lambda (m) (m x y)))

(define (car z)
  (z (lambda (p q) p)))

(define (cdr z)
  (z (lambda (p q) q)))

(car (cons 1 2))
(cdr (cons 1 2))
#+end_src

#+RESULTS:
: 1
: 2

** 2.5

#+begin_src racket :results output
(define (make-pair a b)
  (* (expt 2 a) (expt 3 b)))

(define (cons x y)
  (make-pair x y))

(define (car z)
  (define (car-iter x counter)
    (if (= 0 (remainder x 2))
        (car-iter (/ x 2) (+ counter 1))
        counter))
  (car-iter z 0))

(define (cdr z)
  (define (cdr-iter x counter)
    (if (= 0 (remainder x 3))
        (cdr-iter (/ x 3) (+ counter 1))
        counter))
  (cdr-iter z 0))

(car (make-pair 2 3))
(cdr (make-pair 2 3))
#+end_src

#+RESULTS:
: 2
: 3

** 2.6

This one took me a little bit to wrap my head around. The key idea is
that each Church numeral is a function that takes two parameters: $f$
a function to apply and $x$ a value to apply the function on. The
order of the numeral is the number of times the function is applied to
the input argument. Below I show examples of adding one to zero.

#+begin_src racket :results output
(define zero (lambda (f) (lambda (x) x)))

(define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))

(define one (lambda (f)
              (lambda (x)
                (f x))))

(define two (lambda (f)
              (lambda (x)
                (f (f x)))))

(define (add a b)
  (lambda (f)
    (lambda (x)
      ((a f)
       ((b f) x)))))

((zero (lambda (x) (+ x 1))) 0)
((one (lambda (x) (+ x 1))) 0)
((two (lambda (x) (+ x 1))) 0)
(((add one two) (lambda (x) (+ x 1))) 0)
#+end_src

#+RESULTS:
: 0
: 1
: 2
: 3

** 2.7

#+begin_src racket :results output
(define (make-interval a b)
  (cons a b))

(define (lower-bound interval)
  (car interval))

(define (upper-bound interval)
  (cdr interval))

(define interval (make-interval 5.0 10.0))
(lower-bound interval)
(upper-bound interval)
#+end_src

#+RESULTS:
: 5.0
: 10.0

** 2.8

We should just be able to use the /add-interval/ procedure and replace
the addition function with a subtraction.

#+begin_src racket :results output
(define (subtract-interval x y)
  (make-interval (- (lower-bound x) (lower-bound y))
                 (- (upper-bound x) (upper-bound y))))

(define (make-interval a b)
  (cons a b))

(define (lower-bound interval)
  (car interval))

(define (upper-bound interval)
  (cdr interval))

(define interval1 (make-interval 5.0 10.0))
(define interval2 (make-interval 0.0 5.0))
(subtract-interval interval1 interval2)
#+end_src

#+RESULTS:
: (5.0 . 5.0)

** 2.9

First let's define notation for the intervals. Let the upper bound of
an interval be denoted as $b$ and the lower bound as $a$.Then the
width of an interval $n$ is

$W_n = b_n - a_n$.

For an interval formed by summing the intervals $m$ and $n$, the upper bound is

$b_{m + n} = b_m + b_n$

and the lower bound is

$a_{m + n} = a_m + a_n$.

Therefore the width of the addition of the intervals is given by

\begin{align*}
  W_{m + n} &= b_{m + n} - a_{m + n} \\
            &= b_m + b_n - a_m - a_n \\
            &= (b_m - a_m) + (b_n - a_n) \\
            &= W_m + W_n
\end{align*}

so the width of the addition of two intervals is equal to the addition
of their widths.

#+begin_src racket :results output
(define (make-interval a b)
  (cons a b))

(define (lower-bound interval)
  (car interval))

(define (upper-bound interval)
  (cdr interval))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (width interval)
  (/ (- (upper-bound interval)
        (lower-bound interval))
     2))

(define interval1 (make-interval 5.0 10.0))
(define interval2 (make-interval 0.0 5.0))

(display "Adding intervals of same width (5.0)")
(width (add-interval interval1 interval1))
(width (add-interval interval2 interval2))
(width (add-interval interval1 interval2))

(display "Multiplying intervals of same width (5.0)")
(width (mul-interval interval1 interval1))
(width (mul-interval interval2 interval2))
(width (mul-interval interval1 interval2))
#+end_src

#+RESULTS:
: Adding intervals of same width (5.0)5.0
: 5.0
: 5.0
: Multiplying intervals of same width (5.0)37.5
: 12.5
: 25.0

** 2.10

#+begin_src racket :results output
(define (make-interval a b)
  (cons a b))

(define (lower-bound interval)
  (car interval))

(define (upper-bound interval)
  (cdr interval))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (spans-zero? interval)
  (and (< (lower-bound interval) 0)
       (> (upper-bound interval) 0)))

(define (div-interval x y)
  (if (or (spans-zero? x)
          (spans-zero? y))
      (error "Error, one of the intervals spans zero")
      (mul-interval x
                    (make-interval (/ 1.0 (upper-bound y))
                                   (/ 1.0 (lower-bound y))))))

(define interval1 (make-interval 5.0 10.0))
(define interval2 (make-interval -1.0 5.0))
(div-interval interval1 interval2)
#+end_src

#+RESULTS:
: Error, one of the intervals spans zero
:   context...:
:    body of "/tmp/babel-ByTkdp/org-babel-2Pd3y0.rkt"

** 2.11

This one was quite tedious with all 9 branches to program
individually.

#+begin_src racket :results output
(define (n-positive x)
  (apply + (map
            (lambda (y)
              (if (> y 0)
                  1
                  0))
            x)))

(define (make-interval a b)
  (cons a b))

(define (lower-bound interval)
  (car interval))

(define (upper-bound interval)
  (cdr interval))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define   (mul-interval2 x y)
  (let ((x1 (lower-bound x))
        (x2 (upper-bound x))
        (y1 (lower-bound y))
        (y2 (upper-bound y)))
    (cond ((= 4 (n-positive (list x1 x2 y1 y2))) (make-interval (* x1 y1) (* x2 y2)))    ; ++,++
          ((= 0 (n-positive (list x1 x2 y1 y2))) (make-interval (* x2 y2) (* x1 y1)))    ; --,--
          ((and (= 0 (n-positive (list x1)))
                (= 3 (n-positive (list x2 y1 y2)))) (make-interval (* x1 y2) (* x2 y2))) ; -+,++
          ((and (= 0 (n-positive (list y1)))
                (= 3 (n-positive (list x1 x2 y2)))) (make-interval (* y1 x2) (* y2 x2))) ; ++,-+
          ((and (= 0 (n-positive (list x1 x2)))
                (= 2 (n-positive (list y1 y2)))) (make-interval (* x1 y2) (* x2 y1))) ; --,++
          ((and (= 0 (n-positive (list y1 y2)))
                (= 2 (n-positive (list x1 x2)))) (make-interval (* y1 x2) (* y2 x1))) ; ++,--
          ((and (= 1 (n-positive (list x1 x2)))
                (= 0 (n-positive (list y1 y2)))) (make-interval (* x2 y1) (* x1 y1))) ; -+,--
          ((and (= 1 (n-positive (list y1 y2)))
                (= 0 (n-positive (list x1 x2)))) (make-interval (* y2 x1) (* y1 x1))) ; --,-+
          ((and (= 1 (n-positive (list x1 x2)))
                (= 1 (n-positive (list y1 y2))))
           ;; -+,-+
           (if (< x1 y1)
               (make-interval (* x1 y2) (* x2 y2))
               (make-interval (* y1 x2) (* x2 y2))))
          )))

(define   (make-condition name x y)
  (list name x y))

(define   (condition-name condition)
  (car condition))

(define   (condition-intervals condition)
  (cdr condition))

(define   (test-multiply condition)
  (newline) (display (condition-name condition))
  (newline) (display "mul-interval: ") (display
                                        (apply mul-interval (condition-intervals condition)))
  (newline) (display "mul-interval2: ") (display
                                         (apply mul-interval2 (condition-intervals condition))))

(define   conditions
  (list
   (make-condition "++ , ++"
                   (make-interval 1 2)
                   (make-interval 11 12))
   (make-condition "-- , --"
                   (make-interval -1 -2)
                   (make-interval -11 -12))
   (make-condition "-+ , ++"
                   (make-interval -1 2)
                   (make-interval 11 12))
   (make-condition "++ , -+"
                   (make-interval 1 2)
                   (make-interval -11 12))
   (make-condition "-- , ++"
                   (make-interval -2 -1)
                   (make-interval 11 12))
   (make-condition "++ , --"
                   (make-interval 1 2)
                   (make-interval -12 -11))
   (make-condition "-+ , --"
                   (make-interval -1 2)
                   (make-interval -12 -11))
   (make-condition "-- , -+"
                   (make-interval -2 -1)
                   (make-interval -12 11))
   (make-condition "-+ , -+"
                   (make-interval -1 2)
                   (make-interval -12 11))))

(for-each test-multiply conditions)
#+end_src

#+RESULTS:
#+begin_example

++ , ++
mul-interval: (11 . 24)
mul-interval2: (11 . 24)
-- , --
mul-interval: (11 . 24)
mul-interval2: (24 . 11)
-+ , ++
mul-interval: (-12 . 24)
mul-interval2: (-12 . 24)
++ , -+
mul-interval: (-22 . 24)
mul-interval2: (-22 . 24)
-- , ++
mul-interval: (-24 . -11)
mul-interval2: (-24 . -11)
++ , --
mul-interval: (-24 . -11)
mul-interval2: (-24 . -11)
-+ , --
mul-interval: (-24 . 12)
mul-interval2: (-24 . 12)
-- , -+
mul-interval: (-22 . 24)
mul-interval2: (-22 . 24)
-+ , -+
mul-interval: (-24 . 22)
mul-interval2: (-24 . 22)
#+end_example

** 2.12

Set the language when tangling, but don't execute. Using
~jupyter-racket~ uses the ~#lang iracket~ language.

#+begin_src jupyter-racket :results none :tangle ex_2_12.rkt :eval no
#lang sicp
#+end_src

First bring in the previously defined abstractions.

#+begin_src jupyter-racket :results none :session 2-12 :tangle ex_2_12.rkt
(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))

(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))

(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))

(define (make-interval a b)
  (cons a b))

(define (lower-bound interval)
  (car interval))

(define (upper-bound interval)
  (cdr interval))
#+end_src

Now define ~make-center-percent~.

#+begin_src jupyter-racket :results none :session 2-12 :tangle ex_2_12.rkt
(define (make-center-percent ctr pct)
  (let ((width (* ctr (/ pct 100.0))))
    (make-interval (- ctr width) (+ ctr width))))
#+end_src

Let's check that it works. A center of 10 with a tolerance of 10% should give
an interval of [13.5, 16.5].

#+begin_src jupyter-racket :results value :display plain :session 2-12 :tangle ex_2_12.rkt
(make-center-percent 15 10)
#+end_src

#+RESULTS:
: '(13.5 . 16.5)

Finally add a percent selector for an interval object.

#+begin_src jupyter-racket :results value :display plain :session 2-12 :tangle ex_2_12.rkt
(define (percent i)
  (* 100 (/ (width i) (center i))))

(percent (make-center-percent 15 10))
#+end_src

#+RESULTS:
: 10.0

** 2.13

Let $c_i$, $l_i$, $w_i$, $p_i$ be the center, lower bound, width, and
percent tolerance of an interval $i$.

Let $i_3 = i_1 \times i_2$. From our definition of taking the products
of intervals,

#+NAME: eq:l3
\begin{align}
\begin{split}
  l_3 &= l_1 \times l_2 \\
      &= (c_1 - w_1)(c_2 - w_2) \\
      &= c_1 c_2 - c_1 w_2 - c_2 w_1 + w_1 w_2
\end{split}
\end{align}

From Equation [[eq:l3]], the width of the new interval can be rewritten as

#+NAME: eq:w3
\begin{align}
\begin{split}
  w_3 &= c_3 - l_3 \\
      &= c_1 c_2 - l_3 \\
      &= c_1 w_2 + c_2 w_1 - w_1 w_2
\end{split}
\end{align}

From Equation [[eq:w3]] we can rewrite the definition of $p_3$ as

\begin{align*}
  p_3 &= 100 \frac{w_3}{c_3} \\
      &= 100 \frac{c_1 w_2 + c_2 w_1 - w_1 w_2}{c_1 c_2} \\
      &= 100 \frac{w_2}{c_2} + 100 \frac{w_1}{c_1} - 100 \frac{w_1 w_2}{c_1 c_2} \\
      &= p_1 + p_2 - \frac{p_1 p_2}{100} \\
      &\approx p_1 + p_2
\end{align*}

So for small tolerances, the percentage tolerance of the product is
approximately the sum of the tolerances.

** 2.14

First set up the code from before to test.

#+begin_src jupyter-racket :session 2-14 :results none
(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))

(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))

(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))

(define (make-interval a b)
  (cons a b))

(define (lower-bound interval)
  (car interval))

(define (upper-bound interval)
  (cdr interval))

(define (make-center-percent ctr pct)
  (let ((width (* ctr (/ pct 100.0))))
    (make-interval (- ctr width) (+ ctr width))))

(define (percent i)
  (* 100 (/ (width i) (center i))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (if (or (spans-zero? x)
          (spans-zero? y))
      (error "Error, one of the intervals spans zero")
      (mul-interval x
                    (make-interval (/ 1.0 (upper-bound y))
                                   (/ 1.0 (lower-bound y))))))

(define (spans-zero? interval)
  (and (< (lower-bound interval) 0)
       (> (upper-bound interval) 0)))
#+end_src

#+begin_src jupyter-racket :session 2-14 :results output
(define A (make-center-percent 100 1))
(define B (make-center-percent 50 1))

(define AdivB (div-interval A B))
(define BdivA (div-interval B A))
(define AdivA (div-interval A A))
(define BdivB (div-interval B B))

(print AdivB) (newline)
(print BdivA) (newline)
(print AdivA) (newline)
(print BdivB) (newline)
#+end_src

#+RESULTS:
: '(1.9603960396039604 . 2.0404040404040407)
: '(0.4900990099009901 . 0.5101010101010102)
: '(0.9801980198019802 . 1.0202020202020203)
: '(0.9801980198019802 . 1.0202020202020203)

Let's check the centers of each interval.

#+begin_src jupyter-racket :session 2-14 :results output
(print (center AdivB)) (newline)
(print (center BdivA)) (newline)
(print (center AdivA)) (newline)
(print (center BdivB)) (newline)
#+end_src

#+RESULTS:
: 2.0004000400040005
: 0.5001000100010001
: 1.0002000200020003
: 1.0002000200020003

These are all off at the millionths place.

** 2.15

Looking back at the previous problem, all the centers shifted away
from zero. This provides a clue about what is going on. There is
inherent asymmetry in our intervals where the side towards zero is
bounded by zero while the side away from zero is unbounded to
infinity. This causes the center of the interval to shift
slightly. Correcting this would require having uneven intervals on
either side of the "center" point.

Then there is the issue of repeated intervals that represent the same
measurement / interval. It is not meaningful to multiply and divide
these intervals in the same way as two independent intervals because
their uncertainty is 100% dependent. There is no uncertainty/error to
propagate when doing ~A / A~, but there is for ~A / B~. Because of
this, Eva is right and ~par2~ is the better program.

I actually ran into a very similar problem in an undergraduate course
on applied quantum mechanics where I had experimental data that I was
using to measure the mass of an electron (I forget exactly which
experiment we conducted). There were two mathematical formulas that I
could use to go from the data to the mass, and one involved either
more parameters with uncertainty or the same parameter multiple times
(I can't remember). This resulted in two estimates for the electron
mass with different uncertainty intervals.

** 2.16

The different algebraic expressions are giving different answers
because they are not tracking the identity of each interval. The
current package treats all the intervals like they are different and
does no simplification to assert that the uncertainties should not
compound in multiplication and division operations.

I am not sure if this problem is solvable because I don't have a proof
that shows that all problems can be rewritten to use each interval
only once in the expression.

** 2.17

#+begin_src jupyter-racket :session 2-17 :results none
(define (last-pair x)
  (if (null? (cdr x))
      (car x)
      (last-pair (cdr x))))
#+end_src

Use the example in the book as a test, ~(last-pair (list 23 72 149 34)) => (34)~.

#+begin_src jupyter-racket :session 2-17 :results value :display plain
(last-pair (list 23 72 149 34))
#+end_src

#+RESULTS:
: 34

** 2.18

As mentioned many times in the lectures, we can use wishful thinking
to solve this problem. If we have a list ~(x y z)~, we can break it
into the first value ~car~ and the rest of the list ~cdr~. To reverse
the list, we just want to append ~car~ to ~reverse cdr~.

#+begin_src jupyter-racket :session 2-18 :results none
(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) (append (cdr list1) list2))))

(define (reverse x)
  (if (null? x)
      '()
      (append (reverse (cdr x)) (list (car x)))))
#+end_src

Test with the given example: ~(reverse (list 1 4 9 16 25)) => (25 16 9 4 1)~.

#+begin_src jupyter-racket :session 2-18 :results output
(print (reverse (list 1 4 9 16 25)))
#+end_src

#+RESULTS:
: '(25 16 9 4 1)

** 2.19

Start with the code provided by the problem.

#+begin_src jupyter-racket :session 2-19 :results none
(define us-coins (list 50 25 10 5 1))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))

(define (cc amount coin-values)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (no-more? coin-values)) 0)
        (else
         (+ (cc amount
                (except-first-denomination
                 coin-values))
            (cc (- amount
                   (first-denomination
                    coin-values))
                coin-values)))))
#+end_src

We need to implement ~first-denomination~,
~except-first-denomination~, and ~no-more?~.

#+begin_src jupyter-racket :session 2-19 :results none
(define (first-denomination coin-values)
  (car coin-values))

(define (except-first-denomination coin-values)
  (cdr coin-values))

(define (no-more? coin-values)
  (null? coin-values))
#+end_src

Test code from the book.

#+begin_src jupyter-racket :session 2-19 :results output
(define us-coins (list 50 25 10 5 1))
(define us-coins-reverse (list 1 5 10 25 50))
(define uk-coins (list 100 50 20 10 5 2 1 0.5))

(print (cc 100 us-coins)) (newline)
(print (cc 100 us-coins-reverse))
#+end_src

#+RESULTS:
: 292
: 292

There is no difference if the order is changed because it counts every
combination of change.

** 2.20

Scheme didn't have ~filter~ during SICP, so I implement my own version
here.

#+begin_src jupyter-racket :session 2-20 :results none
(define (filter p? x)
  (cond ((null? x) '())
        ((p? (car x)) (cons (car x) (filter p? (cdr x))))
        (else (filter p? (cdr x)))))

(define (same-parity x . y)
  (if (odd? x)
      (filter odd? (append (list x) y))
      (filter even? (append (list x) y))))
#+end_src

#+begin_src jupyter-racket :session 2-20 :results output
(display (same-parity 1 2 3 4 5 6 7)) (newline)
(display (same-parity 2 3 4 5 6 7))
#+end_src

#+RESULTS:
: (1 3 5 7)
: (2 4 6)

** 2.21

#+begin_src jupyter-racket :session 2-21 :results output
(define (square x) (* x x))

(define (square-list items)
  (if (null? items)
      '()
      (cons (square (car items)) (square-list (cdr items)))))

(display (square-list (list 1 2 3 4)))
#+end_src

#+RESULTS:
: (1 4 9 16)

#+begin_src jupyter-racket :session 2-21 :results output
(define (square-list2 items)
  (map square items))

(display (square-list (list 1 2 3 4)))
#+end_src

#+RESULTS:
: (1 4 9 16)

** 2.22

First let's look at the behavior.

#+begin_src jupyter-racket :session 2-22 :results output
(define (square x) (* x x))

(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons (square (car things))
                    answer))))
  (iter items '()))

(display (square-list (list 1 2 3 4)))
#+end_src

#+RESULTS:
: (16 9 4 1)

As described in the book, the results are in reverse order. This
happens because it keeps cons-ign the current value to the beginning
of the answer list. Instead, it needs to be appending to the end of
the list.

The attempted fix doesn't work.

#+begin_src jupyter-racket :session 2-22 :results output
(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons answer
                    (square (car things))))))
  (iter items '()))

(display (square-list (list 1 2 3 4)))
#+end_src

#+RESULTS:
: ((((() . 1) . 4) . 9) . 16)

This successfully gets the elements in the right order, but they are
in a nested list. This demonstrates an incorrect implementation of
append where you cons a list with a value.

# local variables:
# org-display-inline-images: t
# org-confirm-babel-evaluate: nil
# latexpreview: t
# end:
