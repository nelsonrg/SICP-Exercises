#+property: header-args:racket :lang sicp
* Exercises
** 2.1

#+begin_src racket :results output
(define (get-sign x)
  (if (>= x 0)
      1
      -1))

(define (make-rat n d)
  (let ((g (gcd n d))
        (sign (get-sign (* n d))))
    (cons (/ (* sign (abs n)) g)
          (/ (abs d) g))))

(define (numer x)
  (car x))

(define (denom x)
  (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(print-rat (make-rat 4 6))
(print-rat (make-rat -4 -6))
(print-rat (make-rat -4 6))
(print-rat (make-rat 4 -6))
#+end_src

#+RESULTS:
: 
: 2/3
: 2/3
: -2/3
: -2/3

** 2.2

#+begin_src racket :results output
(define (make-point x y)
  (cons x y))

(define (x-point point)
  (car point))

(define (y-point point)
  (cdr point))

(define (make-segment start-point end-point)
  (cons start-point end-point))

(define (start-segment segment)
  (car segment))

(define (end-segment segment)
  (cdr segment))

(define (mid-point segment)
  (let ((point-list (list (start-segment segment) (end-segment segment))))
    (make-point (average (map x-point point-list))
                (average (map y-point point-list)))))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

(define (print-segment s)
  (print-point (start-segment s))
  (print-point (end-segment s)))

(define (sum x)
  (apply + x))

(define (length x)
  (if (null? x)
      0
      (+ 1 (length (cdr x)))))

(define (average x)
  (/ (sum x)
     (length x)))

(define origin (make-point 0 0))
(define p1 (make-point 1 1))
(define segment1 (make-segment origin p1))
(print-segment segment1)
(print-point (mid-point segment1))
#+end_src

#+RESULTS:
: 
: (0,0)
: (1,1)
: (1/2,1/2)

** 2.4

#+begin_src racket :results output
#lang sicp

(define (cons x y)
  (lambda (m) (m x y)))

(define (car z)
  (z (lambda (p q) p)))

(define (cdr z)
  (z (lambda (p q) q)))

(car (cons 1 2))
(cdr (cons 1 2))
#+end_src

#+RESULTS:
: 1
: 2

** 2.5

#+begin_src racket :results output
(define (make-pair a b)
  (* (expt 2 a) (expt 3 b)))

(define (cons x y)
  (make-pair x y))

(define (car z)
  (define (car-iter x counter)
    (if (= 0 (remainder x 2))
        (car-iter (/ x 2) (+ counter 1))
        counter))
  (car-iter z 0))

(define (cdr z)
  (define (cdr-iter x counter)
    (if (= 0 (remainder x 3))
        (cdr-iter (/ x 3) (+ counter 1))
        counter))
  (cdr-iter z 0))

(car (make-pair 2 3))
(cdr (make-pair 2 3))
#+end_src

#+RESULTS:
: 2
: 3

** 2.6

This one took me a little bit to wrap my head around. The key idea is
that each Church numeral is a function that takes two parameters: $f$
a function to apply and $x$ a value to apply the function on. The
order of the numeral is the number of times the function is applied to
the input argument. Below I show examples of adding one to zero.

#+begin_src racket :results output
(define zero (lambda (f) (lambda (x) x)))

(define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))

(define one (lambda (f)
              (lambda (x)
                (f x))))

(define two (lambda (f)
              (lambda (x)
                (f (f x)))))

(define (add a b)
  (lambda (f)
    (lambda (x)
      ((a f)
       ((b f) x)))))

((zero (lambda (x) (+ x 1))) 0)
((one (lambda (x) (+ x 1))) 0)
((two (lambda (x) (+ x 1))) 0)
(((add one two) (lambda (x) (+ x 1))) 0)
#+end_src

#+RESULTS:
: 0
: 1
: 2
: 3

** 2.7

#+begin_src racket :results output
(define (make-interval a b)
  (cons a b))

(define (lower-bound interval)
  (car interval))

(define (upper-bound interval)
  (cdr interval))

(define interval (make-interval 5.0 10.0))
(lower-bound interval)
(upper-bound interval)
#+end_src

#+RESULTS:
: 5.0
: 10.0
